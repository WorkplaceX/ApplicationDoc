// Do not modify this file. It's generated by Framework.Cli generate command.

namespace DatabaseIntegrate.dbo
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.Linq;
    using System.Threading.Tasks;
    using Framework.DataAccessLayer;
    using Database.dbo;

    /// <summary>
    /// Integrate Sql=[dbo].[FrameworkLanguageIntegrate]; AppTypeName=Application.Doc.AppMain; Assembly=App;
    /// </summary>
    public static class FrameworkLanguageIntegrateAppApplicationDocAppMain
    {
        public enum IdEnum { [IdEnum(null)]None = 0, [IdEnum("English")]English = -1, [IdEnum("German")]German = -2 }

        public static FrameworkLanguageIntegrate Row(this IdEnum value)
        {
            return RowList.Where(item => item.IdName == IdEnumAttribute.IdNameFromEnum(value)).SingleOrDefault();
        }

        public static IdEnum IdName(string value)
        {
            return IdEnumAttribute.IdNameToEnum<IdEnum>(value);
        }

        public static string IdName(this IdEnum value)
        {
            return IdEnumAttribute.IdNameFromEnum(value);
        }

        public static async Task<int> Id(this IdEnum value)
        {
            return (await Data.Query<FrameworkLanguageIntegrate>().Where(item => item.IdName == IdEnumAttribute.IdNameFromEnum(value)).QueryExecuteAsync()).Single().Id;
        }

        public static List<FrameworkLanguageIntegrate> RowList
        {
            get
            {
                var result = new List<FrameworkLanguageIntegrate>
                {
                    new FrameworkLanguageIntegrate { Id = 0, AppTypeName = "Application.Doc.AppMain", Name = "English", TextHtml = "<span class=\"flag-icon flag-icon-gb\"></span> English", IdName = "English" },
                    new FrameworkLanguageIntegrate { Id = 0, AppTypeName = "Application.Doc.AppMain", Name = "German", TextHtml = "<span class=\"flag-icon flag-icon-de\"></span> German", IdName = "German" },
                };
                return result;
            }
        }
    }
}

namespace DatabaseIntegrate.Doc
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.Linq;
    using System.Threading.Tasks;
    using Framework.DataAccessLayer;
    using Database.Doc;

    /// <summary>
    /// Integrate Sql=[Doc].[LoginUserIntegrate]; Assembly=App;
    /// </summary>
    public static class LoginUserIntegrateApp
    {
        public enum IdEnum { [IdEnum(null)]None = 0, [IdEnum("Admin")]Admin = -1, [IdEnum("c")]c = -2, [IdEnum("d")]d = -3, [IdEnum("Guest")]Guest = -4 }

        public static LoginUserIntegrate Row(this IdEnum value)
        {
            return RowList.Where(item => item.IdName == IdEnumAttribute.IdNameFromEnum(value)).SingleOrDefault();
        }

        public static IdEnum IdName(string value)
        {
            return IdEnumAttribute.IdNameToEnum<IdEnum>(value);
        }

        public static string IdName(this IdEnum value)
        {
            return IdEnumAttribute.IdNameFromEnum(value);
        }

        public static async Task<int> Id(this IdEnum value)
        {
            return (await Data.Query<LoginUserIntegrate>().Where(item => item.IdName == IdEnumAttribute.IdNameFromEnum(value)).QueryExecuteAsync()).Single().Id;
        }

        public static List<LoginUserIntegrate> RowList
        {
            get
            {
                var result = new List<LoginUserIntegrate>
                {
                    new LoginUserIntegrate { Id = 0, Name = "Admin", NameFirst = null, NameLast = null, Email = null, PasswordHash = null, PasswordSalt = null, IsActive = true, IsIntegrate = true, IsDelete = false, IdName = "Admin" },
                    new LoginUserIntegrate { Id = 0, Name = "c", NameFirst = null, NameLast = null, Email = null, PasswordHash = null, PasswordSalt = null, IsActive = true, IsIntegrate = true, IsDelete = false, IdName = "c" },
                    new LoginUserIntegrate { Id = 0, Name = "d", NameFirst = null, NameLast = null, Email = null, PasswordHash = null, PasswordSalt = null, IsActive = true, IsIntegrate = true, IsDelete = false, IdName = "d" },
                    new LoginUserIntegrate { Id = 0, Name = "Guest", NameFirst = null, NameLast = null, Email = null, PasswordHash = null, PasswordSalt = null, IsActive = true, IsIntegrate = true, IsDelete = false, IdName = "Guest" },
                };
                return result;
            }
        }
    }

    /// <summary>
    /// Integrate Sql=[Doc].[LoginRoleIntegrate]; Assembly=App;
    /// </summary>
    public static class LoginRoleIntegrateApp
    {
        public enum IdEnum { [IdEnum(null)]None = 0, [IdEnum("Admin")]Admin = -1, [IdEnum("Customer")]Customer = -2, [IdEnum("Developer")]Developer = -3, [IdEnum("Guest")]Guest = -4, [IdEnum("Language")]Language = -5, [IdEnum("LoginShow")]LoginShow = -6 }

        public static LoginRoleIntegrate Row(this IdEnum value)
        {
            return RowList.Where(item => item.IdName == IdEnumAttribute.IdNameFromEnum(value)).SingleOrDefault();
        }

        public static IdEnum IdName(string value)
        {
            return IdEnumAttribute.IdNameToEnum<IdEnum>(value);
        }

        public static string IdName(this IdEnum value)
        {
            return IdEnumAttribute.IdNameFromEnum(value);
        }

        public static async Task<int> Id(this IdEnum value)
        {
            return (await Data.Query<LoginRoleIntegrate>().Where(item => item.IdName == IdEnumAttribute.IdNameFromEnum(value)).QueryExecuteAsync()).Single().Id;
        }

        public static List<LoginRoleIntegrate> RowList
        {
            get
            {
                var result = new List<LoginRoleIntegrate>
                {
                    new LoginRoleIntegrate { Id = 0, Name = "Admin", Description = null, IdName = "Admin" },
                    new LoginRoleIntegrate { Id = 0, Name = "Customer", Description = null, IdName = "Customer" },
                    new LoginRoleIntegrate { Id = 0, Name = "Developer", Description = null, IdName = "Developer" },
                    new LoginRoleIntegrate { Id = 0, Name = "Guest", Description = "User not logged in", IdName = "Guest" },
                    new LoginRoleIntegrate { Id = 0, Name = "Language", Description = "User can translate application into an other language.", IdName = "Language" },
                    new LoginRoleIntegrate { Id = 0, Name = "LoginShow", Description = "Show sign up and login button", IdName = "LoginShow" },
                };
                return result;
            }
        }
    }
}
